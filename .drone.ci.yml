#
# This file is used for running on CI server
# Need to keep this in sync with .drone.yml
#

kind: pipeline
type: docker
name: default-amd64

platform:
  os: linux
  arch: amd64

trigger:
  branch:
    - master

workspace:
  base: /go
  path: src/github.com/leodotcloud/swiss-army-knife

steps:
  - name: version
    image: golang:1.13.9-buster
    commands:
      - ./scripts/version

  - name: lint
    image: golangci/golangci-lint:v1.24.0
    commands:
      - ./scripts/lint

  - name: test
    image: golang:1.13.9-buster
    environment:
      CGO_ENABLED: 0
      GOFLAGS: -mod=vendor
    commands:
      - . ./version.env
      - ./scripts/test

  - name: build
    image: golang:1.13.9-buster
    environment:
      CGO_ENABLED: 0
      GOFLAGS: -mod=vendor
    commands:
      - . ./version.env
      - ./scripts/build
  - name: create tag
    image: docker:git
    commands:
      - git fetch --tags
      - echo -n "latest-linux-amd64,$(git describe --tags --abbrev=0)-linux-amd64" > .tags
  - name: publish
    image: plugins/docker
    settings:
      username:
        from_secret: DOCKERHUB_USERNAME
      password:
        from_secret: DOCKERHUB_PASSWORD
      repo: svil/swiss-army-knife
      dockerfile: package/Dockerfile
---
#
# This file is used for running on CI server
# Need to keep this in sync with .drone.yml
#

kind: pipeline
type: docker
name: default-arm64

platform:
  os: linux
  arch: arm64

trigger:
  branch:
    - master

workspace:
  base: /go
  path: src/github.com/leodotcloud/swiss-army-knife

steps:
  - name: version
    image: golang:1.13.9-buster
    commands:
      - ./scripts/version

  - name: lint
    image: golangci/golangci-lint:v1.32.0
    commands:
      - ./scripts/lint

  - name: test
    image: golang:1.13.9-buster
    environment:
      CGO_ENABLED: 0
      GOFLAGS: -mod=vendor
    commands:
      - . ./version.env
      - ./scripts/test

  - name: build
    image: golang:1.13.9-buster
    environment:
      CGO_ENABLED: 0
      GOFLAGS: -mod=vendor
    commands:
      - . ./version.env
      - ./scripts/build
  - name: create tag
    image: docker:git
    commands:
      - git fetch --tags
      - echo -n "latest-linux-arm64,$(git describe --tags --abbrev=0)-linux-arm64" > .tags

  - name: publish
    image: plugins/docker
    settings:
      username:
        from_secret: DOCKERHUB_USERNAME
      password:
        from_secret: DOCKERHUB_PASSWORD
      repo: svil/swiss-army-knife
      dockerfile: package/Dockerfile
    when:
      branch:
        - master
